name: ML CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  # # Step 1: Checkout Code
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

  # Step 2: Setup Python and Install Dependencies
  setup:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

  # Step 3: Run Unit Tests
  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      - name: Run Unit Tests
        env:
          PYTHONPATH: .
        run: |
          pytest app/tests/test_app.py 

  # Step 4: Build Docker Image
  build:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build Docker Image
        run: |
          docker build -t iris-app:latest .

  # Step 5: Scan Docker Image for Vulnerabilities (Trivy)
  image-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Trivy
        run: |
          wget -qO- https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Scan Docker Image
        run: |
          docker build -t iris-app:latest .
          trivy image iris-app:latest

  # # Step 6: Push Docker Image to DockerHub
  # push-image:
  #   runs-on: ubuntu-latest
  #   needs: image-scan
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Login to DockerHub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Push Docker Image
  #       run: |
  #         docker build -t iris-app:latest .
  #         docker tag iris-app:latest ${{ secrets.DOCKER_USERNAME }}/iris-app:latest
  #         docker push ${{ secrets.DOCKER_USERNAME }}/iris-app:latest

  # Step 6: Push Docker Image to AWS-ECR and deploy in AWS-EC2
  push-image:
    runs-on: ubuntu-latest
    needs: image-scan
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Build Docker Image
        run: docker build -t iris-app:latest .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Push Docker Image to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          docker tag iris-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/iris-app:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/iris-app:latest  

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }} 
          username: ${{ secrets.EC2_USERNAME }} 
          key: ${{ secrets.EC2_SSH_KEY }}  
          script: |
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/iris-app:latest
            docker stop iris-app || true # In case the container doesn't exist yet
            docker rm iris-app || true
            docker run -d -p 80:8000 --name iris-app ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/iris-app:latest 
