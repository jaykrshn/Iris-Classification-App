name: ML CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  # # Step 1: Checkout Code
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

  # Step 2: Setup Python and Install Dependencies
  setup:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

  # Step 3: Run Unit Tests
  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      - name: Run Unit Tests
        env:
          PYTHONPATH: .
        run: |
          pytest app/tests/test_app.py 

  # Step 4: Build Docker Image
  build:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build Docker Image
        run: |
          docker build -t ml-classifier:latest .

  # Step 5: Scan Docker Image for Vulnerabilities (Trivy)
  image-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Trivy
        run: |
          wget -qO- https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Scan Docker Image
        run: |
          docker build -t ml-classifier:latest .
          trivy image ml-classifier:latest

  # Step 6: Push Docker Image to DockerHub
  push-image:
    runs-on: ubuntu-latest
    needs: image-scan
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker Image
        run: |
          docker build -t ml-classifier:latest .
          docker tag ml-classifier:latest ${{ secrets.DOCKER_USERNAME }}/ml-classifier:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/ml-classifier:latest
